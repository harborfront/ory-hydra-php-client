<?php
/**
 * URL
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ory\Hydra
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydra OAuth2 & OpenID Connect Server
 *
 * Please refer to the user guide for in-depth documentation: https://ory.gitbooks.io/hydra/content/  Hydra offers OAuth 2.0 and OpenID Connect Core 1.0 capabilities as a service. Hydra is different, because it works with any existing authentication infrastructure, not just LDAP or SAML. By implementing a consent app (works with any programming language) you build a bridge between Hydra and your authentication infrastructure. Hydra is able to securely manage JSON Web Keys, and has a sophisticated policy-based access control you can use if you want to. Hydra is suitable for green- (new) and brownfield (existing) projects. If you are not familiar with OAuth 2.0 and are working on a greenfield project, we recommend evaluating if OAuth 2.0 really serves your purpose. Knowledge of OAuth 2.0 is imperative in understanding what Hydra does and how it works.  The official repository is located at https://github.com/ory/hydra
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ory\Hydra\Model;

use \ArrayAccess;

/**
 * URL Class Doc Comment
 *
 * @category    Class
 * @description scheme://[userinfo@]host/path[?query][#fragment]  URLs that do not start with a slash after the scheme are interpreted as:  scheme:opaque[?query][#fragment]  Note that the Path field is stored in decoded form: /%47%6f%2f becomes /Go/. A consequence is that it is impossible to tell which slashes in the Path were slashes in the raw URL and which were %2f. This distinction is rarely important, but when it is, code must not use Path directly.  Go 1.5 introduced the RawPath field to hold the encoded form of Path. The Parse function sets both Path and RawPath in the URL it returns, and URL&#39;s String method uses RawPath if it is a valid encoding of Path, by calling the EscapedPath method.  In earlier versions of Go, the more indirect workarounds were that an HTTP server could consult req.RequestURI and an HTTP client could construct a URL struct directly and set the Opaque field instead of Path. These still work as well.
 * @package     Ory\Hydra
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class URL implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'URL';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'force_query' => 'bool',
        'fragment' => 'string',
        'host' => 'string',
        'opaque' => 'string',
        'path' => 'string',
        'raw_path' => 'string',
        'raw_query' => 'string',
        'scheme' => 'string',
        'user' => '\Ory\Hydra\Model\Userinfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'force_query' => null,
        'fragment' => null,
        'host' => null,
        'opaque' => null,
        'path' => null,
        'raw_path' => null,
        'raw_query' => null,
        'scheme' => null,
        'user' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'force_query' => 'ForceQuery',
        'fragment' => 'Fragment',
        'host' => 'Host',
        'opaque' => 'Opaque',
        'path' => 'Path',
        'raw_path' => 'RawPath',
        'raw_query' => 'RawQuery',
        'scheme' => 'Scheme',
        'user' => 'User'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'force_query' => 'setForceQuery',
        'fragment' => 'setFragment',
        'host' => 'setHost',
        'opaque' => 'setOpaque',
        'path' => 'setPath',
        'raw_path' => 'setRawPath',
        'raw_query' => 'setRawQuery',
        'scheme' => 'setScheme',
        'user' => 'setUser'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'force_query' => 'getForceQuery',
        'fragment' => 'getFragment',
        'host' => 'getHost',
        'opaque' => 'getOpaque',
        'path' => 'getPath',
        'raw_path' => 'getRawPath',
        'raw_query' => 'getRawQuery',
        'scheme' => 'getScheme',
        'user' => 'getUser'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['force_query'] = isset($data['force_query']) ? $data['force_query'] : null;
        $this->container['fragment'] = isset($data['fragment']) ? $data['fragment'] : null;
        $this->container['host'] = isset($data['host']) ? $data['host'] : null;
        $this->container['opaque'] = isset($data['opaque']) ? $data['opaque'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['raw_path'] = isset($data['raw_path']) ? $data['raw_path'] : null;
        $this->container['raw_query'] = isset($data['raw_query']) ? $data['raw_query'] : null;
        $this->container['scheme'] = isset($data['scheme']) ? $data['scheme'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets force_query
     * @return bool
     */
    public function getForceQuery()
    {
        return $this->container['force_query'];
    }

    /**
     * Sets force_query
     * @param bool $force_query
     * @return $this
     */
    public function setForceQuery($force_query)
    {
        $this->container['force_query'] = $force_query;

        return $this;
    }

    /**
     * Gets fragment
     * @return string
     */
    public function getFragment()
    {
        return $this->container['fragment'];
    }

    /**
     * Sets fragment
     * @param string $fragment
     * @return $this
     */
    public function setFragment($fragment)
    {
        $this->container['fragment'] = $fragment;

        return $this;
    }

    /**
     * Gets host
     * @return string
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     * @param string $host
     * @return $this
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets opaque
     * @return string
     */
    public function getOpaque()
    {
        return $this->container['opaque'];
    }

    /**
     * Sets opaque
     * @param string $opaque
     * @return $this
     */
    public function setOpaque($opaque)
    {
        $this->container['opaque'] = $opaque;

        return $this;
    }

    /**
     * Gets path
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     * @param string $path
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets raw_path
     * @return string
     */
    public function getRawPath()
    {
        return $this->container['raw_path'];
    }

    /**
     * Sets raw_path
     * @param string $raw_path
     * @return $this
     */
    public function setRawPath($raw_path)
    {
        $this->container['raw_path'] = $raw_path;

        return $this;
    }

    /**
     * Gets raw_query
     * @return string
     */
    public function getRawQuery()
    {
        return $this->container['raw_query'];
    }

    /**
     * Sets raw_query
     * @param string $raw_query
     * @return $this
     */
    public function setRawQuery($raw_query)
    {
        $this->container['raw_query'] = $raw_query;

        return $this;
    }

    /**
     * Gets scheme
     * @return string
     */
    public function getScheme()
    {
        return $this->container['scheme'];
    }

    /**
     * Sets scheme
     * @param string $scheme
     * @return $this
     */
    public function setScheme($scheme)
    {
        $this->container['scheme'] = $scheme;

        return $this;
    }

    /**
     * Gets user
     * @return \Ory\Hydra\Model\Userinfo
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     * @param \Ory\Hydra\Model\Userinfo $user
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Ory\Hydra\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Ory\Hydra\ObjectSerializer::sanitizeForSerialization($this));
    }
}


