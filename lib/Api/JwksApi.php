<?php
/**
 * JwksApi
 * PHP version 5
 *
 * @category Class
 * @package  Ory\Hydra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydra OAuth2 & OpenID Connect Server
 *
 * Please refer to the user guide for in-depth documentation: https://ory.gitbooks.io/hydra/content/  Hydra offers OAuth 2.0 and OpenID Connect Core 1.0 capabilities as a service. Hydra is different, because it works with any existing authentication infrastructure, not just LDAP or SAML. By implementing a consent app (works with any programming language) you build a bridge between Hydra and your authentication infrastructure. Hydra is able to securely manage JSON Web Keys, and has a sophisticated policy-based access control you can use if you want to. Hydra is suitable for green- (new) and brownfield (existing) projects. If you are not familiar with OAuth 2.0 and are working on a greenfield project, we recommend evaluating if OAuth 2.0 really serves your purpose. Knowledge of OAuth 2.0 is imperative in understanding what Hydra does and how it works.  The official repository is located at https://github.com/ory/hydra
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ory\Hydra\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use Ory\Hydra\ApiException;
use Ory\Hydra\Configuration;
use Ory\Hydra\HeaderSelector;
use Ory\Hydra\ObjectSerializer;

/**
 * JwksApi Class Doc Comment
 *
 * @category Class
 * @package  Ory\Hydra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JwksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createJwkKey
     *
     * Generate a new JSON Web Key
     *
     * @param string $set The set (required)
     * @param \Ory\Hydra\Model\CreateRequest $body  (optional)
     * @throws \Ory\Hydra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Model\JwkSet
     */
    public function createJwkKey($set, $body = null)
    {
        list($response) = $this->createJwkKeyWithHttpInfo($set, $body);
        return $response;
    }

    /**
     * Operation createJwkKeyWithHttpInfo
     *
     * Generate a new JSON Web Key
     *
     * @param string $set The set (required)
     * @param \Ory\Hydra\Model\CreateRequest $body  (optional)
     * @throws \Ory\Hydra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Model\JwkSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function createJwkKeyWithHttpInfo($set, $body = null)
    {
        $returnType = '\Ory\Hydra\Model\JwkSet';
        $request = $this->createJwkKeyRequest($set, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\JwkSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createJwkKeyAsync
     *
     * Generate a new JSON Web Key
     *
     * @param string $set The set (required)
     * @param \Ory\Hydra\Model\CreateRequest $body  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createJwkKeyAsync($set, $body = null)
    {
        return $this->createJwkKeyAsyncWithHttpInfo($set, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createJwkKeyAsyncWithHttpInfo
     *
     * Generate a new JSON Web Key
     *
     * @param string $set The set (required)
     * @param \Ory\Hydra\Model\CreateRequest $body  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createJwkKeyAsyncWithHttpInfo($set, $body = null)
    {
        $returnType = '\Ory\Hydra\Model\JwkSet';
        $request = $this->createJwkKeyRequest($set, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'createJwkKey'
     *
     * @param string $set The set (required)
     * @param \Ory\Hydra\Model\CreateRequest $body  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createJwkKeyRequest($set, $body = null)
    {
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling createJwkKey');
        }

        $resourcePath = '/keys/{set}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($set !== null) {
            $resourcePath = str_replace('{' . 'set' . '}', ObjectSerializer::toPathValue($set), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteJwkKey
     *
     * Delete a JSON Web Key
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @throws \Ory\Hydra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteJwkKey($kid, $set)
    {
        $this->deleteJwkKeyWithHttpInfo($kid, $set);
    }

    /**
     * Operation deleteJwkKeyWithHttpInfo
     *
     * Delete a JSON Web Key
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @throws \Ory\Hydra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteJwkKeyWithHttpInfo($kid, $set)
    {
        $returnType = '';
        $request = $this->deleteJwkKeyRequest($kid, $set);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteJwkKeyAsync
     *
     * Delete a JSON Web Key
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteJwkKeyAsync($kid, $set)
    {
        return $this->deleteJwkKeyAsyncWithHttpInfo($kid, $set)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteJwkKeyAsyncWithHttpInfo
     *
     * Delete a JSON Web Key
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteJwkKeyAsyncWithHttpInfo($kid, $set)
    {
        $returnType = '';
        $request = $this->deleteJwkKeyRequest($kid, $set);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteJwkKey'
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteJwkKeyRequest($kid, $set)
    {
        // verify the required parameter 'kid' is set
        if ($kid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $kid when calling deleteJwkKey');
        }
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling deleteJwkKey');
        }

        $resourcePath = '/keys/{set}/{kid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($kid !== null) {
            $resourcePath = str_replace('{' . 'kid' . '}', ObjectSerializer::toPathValue($kid), $resourcePath);
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace('{' . 'set' . '}', ObjectSerializer::toPathValue($set), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteJwkSet
     *
     * Delete a JSON Web Key
     *
     * @param string $set The set (required)
     * @throws \Ory\Hydra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteJwkSet($set)
    {
        $this->deleteJwkSetWithHttpInfo($set);
    }

    /**
     * Operation deleteJwkSetWithHttpInfo
     *
     * Delete a JSON Web Key
     *
     * @param string $set The set (required)
     * @throws \Ory\Hydra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteJwkSetWithHttpInfo($set)
    {
        $returnType = '';
        $request = $this->deleteJwkSetRequest($set);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteJwkSetAsync
     *
     * Delete a JSON Web Key
     *
     * @param string $set The set (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteJwkSetAsync($set)
    {
        return $this->deleteJwkSetAsyncWithHttpInfo($set)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteJwkSetAsyncWithHttpInfo
     *
     * Delete a JSON Web Key
     *
     * @param string $set The set (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteJwkSetAsyncWithHttpInfo($set)
    {
        $returnType = '';
        $request = $this->deleteJwkSetRequest($set);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'deleteJwkSet'
     *
     * @param string $set The set (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteJwkSetRequest($set)
    {
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling deleteJwkSet');
        }

        $resourcePath = '/keys/{set}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($set !== null) {
            $resourcePath = str_replace('{' . 'set' . '}', ObjectSerializer::toPathValue($set), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJwkSet
     *
     * Retrieves a JSON Web Key Set matching the set
     *
     * @param string $set The set (required)
     * @throws \Ory\Hydra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Model\JwkSet
     */
    public function getJwkSet($set)
    {
        list($response) = $this->getJwkSetWithHttpInfo($set);
        return $response;
    }

    /**
     * Operation getJwkSetWithHttpInfo
     *
     * Retrieves a JSON Web Key Set matching the set
     *
     * @param string $set The set (required)
     * @throws \Ory\Hydra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Model\JwkSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJwkSetWithHttpInfo($set)
    {
        $returnType = '\Ory\Hydra\Model\JwkSet';
        $request = $this->getJwkSetRequest($set);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\JwkSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJwkSetAsync
     *
     * Retrieves a JSON Web Key Set matching the set
     *
     * @param string $set The set (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJwkSetAsync($set)
    {
        return $this->getJwkSetAsyncWithHttpInfo($set)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getJwkSetAsyncWithHttpInfo
     *
     * Retrieves a JSON Web Key Set matching the set
     *
     * @param string $set The set (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJwkSetAsyncWithHttpInfo($set)
    {
        $returnType = '\Ory\Hydra\Model\JwkSet';
        $request = $this->getJwkSetRequest($set);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getJwkSet'
     *
     * @param string $set The set (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getJwkSetRequest($set)
    {
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling getJwkSet');
        }

        $resourcePath = '/keys/{set}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($set !== null) {
            $resourcePath = str_replace('{' . 'set' . '}', ObjectSerializer::toPathValue($set), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJwkSetKey
     *
     * Retrieves a JSON Web Key Set matching the set and the kid
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @throws \Ory\Hydra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Model\JwkSet
     */
    public function getJwkSetKey($kid, $set)
    {
        list($response) = $this->getJwkSetKeyWithHttpInfo($kid, $set);
        return $response;
    }

    /**
     * Operation getJwkSetKeyWithHttpInfo
     *
     * Retrieves a JSON Web Key Set matching the set and the kid
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @throws \Ory\Hydra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Model\JwkSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJwkSetKeyWithHttpInfo($kid, $set)
    {
        $returnType = '\Ory\Hydra\Model\JwkSet';
        $request = $this->getJwkSetKeyRequest($kid, $set);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\JwkSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJwkSetKeyAsync
     *
     * Retrieves a JSON Web Key Set matching the set and the kid
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJwkSetKeyAsync($kid, $set)
    {
        return $this->getJwkSetKeyAsyncWithHttpInfo($kid, $set)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getJwkSetKeyAsyncWithHttpInfo
     *
     * Retrieves a JSON Web Key Set matching the set and the kid
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJwkSetKeyAsyncWithHttpInfo($kid, $set)
    {
        $returnType = '\Ory\Hydra\Model\JwkSet';
        $request = $this->getJwkSetKeyRequest($kid, $set);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'getJwkSetKey'
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getJwkSetKeyRequest($kid, $set)
    {
        // verify the required parameter 'kid' is set
        if ($kid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $kid when calling getJwkSetKey');
        }
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling getJwkSetKey');
        }

        $resourcePath = '/keys/{set}/{kid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($kid !== null) {
            $resourcePath = str_replace('{' . 'kid' . '}', ObjectSerializer::toPathValue($kid), $resourcePath);
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace('{' . 'set' . '}', ObjectSerializer::toPathValue($set), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateJwkKey
     *
     * Updates a JSON Web Key
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @param \Ory\Hydra\Model\JwkSet $body  (optional)
     * @throws \Ory\Hydra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Model\JwkSet
     */
    public function updateJwkKey($kid, $set, $body = null)
    {
        list($response) = $this->updateJwkKeyWithHttpInfo($kid, $set, $body);
        return $response;
    }

    /**
     * Operation updateJwkKeyWithHttpInfo
     *
     * Updates a JSON Web Key
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @param \Ory\Hydra\Model\JwkSet $body  (optional)
     * @throws \Ory\Hydra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Model\JwkSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateJwkKeyWithHttpInfo($kid, $set, $body = null)
    {
        $returnType = '\Ory\Hydra\Model\JwkSet';
        $request = $this->updateJwkKeyRequest($kid, $set, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\JwkSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateJwkKeyAsync
     *
     * Updates a JSON Web Key
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @param \Ory\Hydra\Model\JwkSet $body  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateJwkKeyAsync($kid, $set, $body = null)
    {
        return $this->updateJwkKeyAsyncWithHttpInfo($kid, $set, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateJwkKeyAsyncWithHttpInfo
     *
     * Updates a JSON Web Key
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @param \Ory\Hydra\Model\JwkSet $body  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateJwkKeyAsyncWithHttpInfo($kid, $set, $body = null)
    {
        $returnType = '\Ory\Hydra\Model\JwkSet';
        $request = $this->updateJwkKeyRequest($kid, $set, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateJwkKey'
     *
     * @param string $kid The kid of the desired key (required)
     * @param string $set The set (required)
     * @param \Ory\Hydra\Model\JwkSet $body  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateJwkKeyRequest($kid, $set, $body = null)
    {
        // verify the required parameter 'kid' is set
        if ($kid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $kid when calling updateJwkKey');
        }
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling updateJwkKey');
        }

        $resourcePath = '/keys/{set}/{kid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($kid !== null) {
            $resourcePath = str_replace('{' . 'kid' . '}', ObjectSerializer::toPathValue($kid), $resourcePath);
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace('{' . 'set' . '}', ObjectSerializer::toPathValue($set), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateJwkSet
     *
     * Updates a JSON Web Key Set
     *
     * @param string $set The set (required)
     * @param \Ory\Hydra\Model\JwkSet $body  (optional)
     * @throws \Ory\Hydra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Model\JwkSet
     */
    public function updateJwkSet($set, $body = null)
    {
        list($response) = $this->updateJwkSetWithHttpInfo($set, $body);
        return $response;
    }

    /**
     * Operation updateJwkSetWithHttpInfo
     *
     * Updates a JSON Web Key Set
     *
     * @param string $set The set (required)
     * @param \Ory\Hydra\Model\JwkSet $body  (optional)
     * @throws \Ory\Hydra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Model\JwkSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateJwkSetWithHttpInfo($set, $body = null)
    {
        $returnType = '\Ory\Hydra\Model\JwkSet';
        $request = $this->updateJwkSetRequest($set, $body);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\JwkSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateJwkSetAsync
     *
     * Updates a JSON Web Key Set
     *
     * @param string $set The set (required)
     * @param \Ory\Hydra\Model\JwkSet $body  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateJwkSetAsync($set, $body = null)
    {
        return $this->updateJwkSetAsyncWithHttpInfo($set, $body)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateJwkSetAsyncWithHttpInfo
     *
     * Updates a JSON Web Key Set
     *
     * @param string $set The set (required)
     * @param \Ory\Hydra\Model\JwkSet $body  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateJwkSetAsyncWithHttpInfo($set, $body = null)
    {
        $returnType = '\Ory\Hydra\Model\JwkSet';
        $request = $this->updateJwkSetRequest($set, $body);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'updateJwkSet'
     *
     * @param string $set The set (required)
     * @param \Ory\Hydra\Model\JwkSet $body  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateJwkSetRequest($set, $body = null)
    {
        // verify the required parameter 'set' is set
        if ($set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set when calling updateJwkSet');
        }

        $resourcePath = '/keys/{set}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($set !== null) {
            $resourcePath = str_replace('{' . 'set' . '}', ObjectSerializer::toPathValue($set), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation wellKnown
     *
     * Public JWKs
     *
     * @throws \Ory\Hydra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Model\JwkSet
     */
    public function wellKnown()
    {
        list($response) = $this->wellKnownWithHttpInfo();
        return $response;
    }

    /**
     * Operation wellKnownWithHttpInfo
     *
     * Public JWKs
     *
     * @throws \Ory\Hydra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Model\JwkSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function wellKnownWithHttpInfo()
    {
        $returnType = '\Ory\Hydra\Model\JwkSet';
        $request = $this->wellKnownRequest();

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\JwkSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Ory\Hydra\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation wellKnownAsync
     *
     * Public JWKs
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wellKnownAsync()
    {
        return $this->wellKnownAsyncWithHttpInfo()->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation wellKnownAsyncWithHttpInfo
     *
     * Public JWKs
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wellKnownAsyncWithHttpInfo()
    {
        $returnType = '\Ory\Hydra\Model\JwkSet';
        $request = $this->wellKnownRequest();

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'wellKnown'
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function wellKnownRequest()
    {

        $resourcePath = '/.well-known/jwks.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

}
