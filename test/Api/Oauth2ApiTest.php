<?php
/**
 * Oauth2ApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Ory\Hydra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydra OAuth2 & OpenID Connect Server
 *
 * Please refer to the user guide for in-depth documentation: https://ory.gitbooks.io/hydra/content/  Hydra offers OAuth 2.0 and OpenID Connect Core 1.0 capabilities as a service. Hydra is different, because it works with any existing authentication infrastructure, not just LDAP or SAML. By implementing a consent app (works with any programming language) you build a bridge between Hydra and your authentication infrastructure. Hydra is able to securely manage JSON Web Keys, and has a sophisticated policy-based access control you can use if you want to. Hydra is suitable for green- (new) and brownfield (existing) projects. If you are not familiar with OAuth 2.0 and are working on a greenfield project, we recommend evaluating if OAuth 2.0 really serves your purpose. Knowledge of OAuth 2.0 is imperative in understanding what Hydra does and how it works.  The official repository is located at https://github.com/ory/hydra
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Ory\Hydra;

use \Ory\Hydra\Configuration;
use \Ory\Hydra\ApiException;
use \Ory\Hydra\ObjectSerializer;

/**
 * Oauth2ApiTest Class Doc Comment
 *
 * @category Class
 * @package  Ory\Hydra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Oauth2ApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for createOAuthClient
     *
     * Creates an OAuth 2.0 Client.
     *
     */
    public function testCreateOAuthClient()
    {
    }

    /**
     * Test case for deleteOAuthClient
     *
     * Deletes an OAuth 2.0 Client.
     *
     */
    public function testDeleteOAuthClient()
    {
    }

    /**
     * Test case for getOAuthClient
     *
     * Fetches an OAuth 2.0 Client..
     *
     */
    public function testGetOAuthClient()
    {
    }

    /**
     * Test case for introspectOAuthToken
     *
     * Introspect an OAuth2 access token.
     *
     */
    public function testIntrospectOAuthToken()
    {
    }

    /**
     * Test case for listOAuthClients
     *
     * Lists OAuth 2.0 Clients.
     *
     */
    public function testListOAuthClients()
    {
    }

    /**
     * Test case for oauthAuth
     *
     * The OAuth 2.0 Auth endpoint.
     *
     */
    public function testOauthAuth()
    {
    }

    /**
     * Test case for oauthToken
     *
     * The OAuth 2.0 Token endpoint.
     *
     */
    public function testOauthToken()
    {
    }

    /**
     * Test case for revokeOAuthToken
     *
     * Revoke an OAuth2 access token.
     *
     */
    public function testRevokeOAuthToken()
    {
    }

    /**
     * Test case for updateOAuthClient
     *
     * Updates an OAuth 2.0 Client.
     *
     */
    public function testUpdateOAuthClient()
    {
    }

    /**
     * Test case for wellKnown
     *
     * Public JWKs.
     *
     */
    public function testWellKnown()
    {
    }

    /**
     * Test case for wellKnownHandler
     *
     * Server well known configuration.
     *
     */
    public function testWellKnownHandler()
    {
    }
}
